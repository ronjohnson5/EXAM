# -*- coding: utf-8 -*-
"""Exam :11/27/2023

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qDoW5sErDD6sFx7BAiHSFOLL1_ZYXPDR
"""

!pip install -q streamlit
!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
!chmod +x cloudflared-linux-amd64
# import subprocess
# subprocess.Popen(["./cloudflared-linux-amd64", "tunnel", "--url", "http://localhost:8501"])
!nohup /content/cloudflared-linux-amd64 tunnel --url http://localhost:8501 &!grep -o 'https://.*\.trycloudflare.com' nohup.out | head -n 1 | xargs -I {} echo "Your tunnel url {}"

!streamlit run /content/app.py &>/content/logs.txt &

!grep -o 'https://.*\.trycloudflare.com' nohup.out | head -n 1 | xargs -I {} echo "Your tunnel url {}"

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
url = "https://storage.googleapis.com/scsu-data-science/bike_sharing.csv"
df = pd.read_csv(url)

# Convert the 'dteday' column to datetime
df['dteday'] = pd.to_datetime(df['dteday'])

# Set the 'dteday' column as the index
df.set_index('dteday', inplace=True)

# Function to plot total ridership over the entire period
def plot_total_ridership():
    plt.figure(figsize=(10, 6))
    plt.plot(df.index, df['cnt'], label='Total Ridership')

    # Bonus: Mark holidays with a different color
    holidays = df[df['holiday'] == 1]
    plt.scatter(holidays.index, holidays['cnt'], color='red', label='Holidays')

    plt.title('Total Ridership Over Time')
    plt.xlabel('Date')
    plt.ylabel('Total Ridership')
    plt.legend()
    st.pyplot()

# Function to plot total ridership by season
def plot_ridership_by_season():
    plt.figure(figsize=(8, 5))
    sns.barplot(x='season', y='cnt', data=df, ci=None)

    plt.title('Total Ridership by Season')
    plt.xlabel('Season')
    plt.ylabel('Total Ridership')
    st.pyplot()

# Function to plot total ridership with rolling average
def plot_rolling_average(rolling_days):
    plt.figure(figsize=(10, 6))
    rolling_col = f'cnt_{rolling_days}d'
    df[rolling_col] = df['cnt'].rolling(window=rolling_days).mean()

    plt.plot(df.index, df['cnt'], label='Total Ridership')
    plt.plot(df.index, df[rolling_col], label=f'{rolling_days}-day Rolling Average', linestyle='--')

    plt.title(f'Total Ridership with {rolling_days}-day Rolling Average')
    plt.xlabel('Date')
    plt.ylabel('Total Ridership')
    plt.legend()
    st.pyplot()

# Streamlit app
def main():
    st.title('Bike Sharing Data Analysis')

    # Sidebar with options
    st.sidebar.header('Options')
    rolling_average_days = st.sidebar.radio('Select Rolling Average:', [7, 14])

    # Display plots based on user selection
    if st.sidebar.checkbox('Show Total Ridership Over Time'):
        plot_total_ridership()

    if st.sidebar.checkbox('Show Total Ridership by Season'):
        plot_ridership_by_season()

    if st.sidebar.checkbox(f'Show Total Ridership with {rolling_average_days}-day Rolling Average'):
        plot_rolling_average(rolling_average_days)

if __name__ == '__main__':
    main()